class ReviewController < NewsController

  #~~~~~~~~~~~~~~~~~~~~~prepare data for reviewing news generated by API ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  #
  #
  def tw

    # - must check reviewer's id (prevent normal user using this function)
    #
    if !(admin_logged_in?)
      render  :inline => "You got no right to enter this page!"
      return
    end

    # get all news which area = Taiwan & special_flag == true
    #
    areas = ["Taiwan"] ;
    tags = ["All","World","Society","Local","Politics","Life","Business","Stock","Sci_Tech",
          "Sport","Entertainment", "Health", "Internet","Travel","Education","Art","Special"] ;


    @news_for_review = News.get_all_special(areas,tags,:none,nil)
    #if @news_for_review.count >= 20
    #  @count = 20
    #else
      @count = @news_for_review.count
    #end


  end



  #~~~~~~~~~~~~~~~~~~~~~prepare data for reviewing spam ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  #
  #
  def spam
    # - must check reviewer's id (prevent normal user using this function)
    #
    if !(admin_logged_in?)
      render  :inline => "You got no right to enter this page!"
      return
    end

    # get all news which area = Taiwan & special_flag == true
    #
    areas = ["Taiwan"] ;
    tags = ["FeedbackTag"] ;

    @spam_news = []

    @spam_report = News.get_all_special(areas,tags,:none,nil)
    @count = @spam_report.count

    @spam_report.each do |report|
       id = Integer((report.title)[('[SPAM REPORT]ID='.length)..(report.title).length])

      @spam_news << (News.find(id))

    end

  end







  #~~~~~~~~~~~~~~~~~~~~~called by AJAX, delete a news ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  #
  #
  def delete_news

    response_str = "NG"

    #logger.debug params
    news_id = Integer(params[:news_id])
    news = News.find(news_id)

    if(news != nil)
      news.delete
      response_str = "OK"
    end

    respond_to do |format|
      format.html { render  :inline => response_str }
    end


  end

  #~~~~~~~~~~~~~~~~~~~~~called by AJAX, delete news-image and publish it ~~~~~~~~~~~~~~~~~~~~~~~
  #
  #
  def delete_img_and_publish

    response_str = "NG"

    news_id = Integer(params[:news_id])
    news = News.find(news_id)

    if(news != nil)
      images = Image.find_by_news_id(news_id)
      if(images != nil)
        images.delete
        news.images = []
      end
      news.special_flag= false
      news.save
      response_str = "OK"

    end

    respond_to do |format|
      format.html { render  :inline => response_str }
    end


  end

  #~~~~~~~~~~~~~~~~~~~~~called by AJAX, publish this news ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  #  (just set special_flag to false)
  #
  def publish_news

    response_str = "NG"

    news_id = Integer(params[:news_id])
    news = News.find(news_id)

    if(news != nil)
      news.special_flag= false
      news.save
      response_str = "OK"
    end

    respond_to do |format|
      format.html { render  :inline => response_str }
    end


  end




  #~~~~~~~~~~~~~~~~~~~~~called by AJAX, jump to admin_data page to change the image ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  #
  #
  def change_image

    response_str = "NG"
    url = root_url + "admin_data/klass/image/"

    news_id = Integer(params[:news_id])
    news = News.find(news_id)

    if(news != nil)
      images = Image.find_by_news_id(news_id)
      url += (images.id).to_s
      url += "/edit"

      response_str = url
    end

    respond_to do |format|
      format.html { render  :inline => response_str }
    end


  end


  #~~~~~~~~~~~~~~~~~~~~~called by AJAX, close the spam news ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # - set special_flag = true & set tag = Closed_spam
  #
  def close_news

    response_str = "NG"

    news_id = Integer(params[:news_id])
    news = News.find(news_id)

    if(news != nil)
      news.special_flag= true

      tag = Tag.find_by_name("Closed_spam") ;
      news.tags << tag
      news.save

      response_str = "OK"
    end

    respond_to do |format|
      format.html { render  :inline => response_str }
    end


  end





  #~~~~~~~~~~~~~~~~~~~~~called by AJAX, close the spam report ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # - set special_flag = true & set tag = Closed_spam
  #
  def close_report

    response_str = "NG"

    news_id = Integer(params[:news_id])
    news = News.find(news_id)

    if(news != nil)
      news.special_flag= true

      news.tags = []
      tag = Tag.find_by_name("Closed_spam_report") ;
      news.tags << tag
      news.save

      response_str = "OK"
    end

    respond_to do |format|
      format.html { render  :inline => response_str }
    end


  end


end
